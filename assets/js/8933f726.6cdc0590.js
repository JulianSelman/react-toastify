"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[7314],{6430:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=n(5893),a=n(1151);const s={id:"update-toast",title:"Update a toast",sidebar_label:"Update a toast"},i=void 0,r={id:"update-toast",title:"Update a toast",description:"When you update a toast, the toast options and the content are inherited but don't worry you can update them as well.",source:"@site/docs/update-toast.md",sourceDirName:".",slug:"/update-toast",permalink:"/react-toastify/update-toast",draft:!1,unlisted:!1,editUrl:"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/update-toast.md",tags:[],version:"current",frontMatter:{id:"update-toast",title:"Update a toast",sidebar_label:"Update a toast"},sidebar:"someSidebar",previous:{title:"Use a controlled progress bar",permalink:"/react-toastify/use-a-controlled-progress-bar"},next:{title:"Define callback",permalink:"/react-toastify/define-callback"}},d={},c=[{value:"Basic example",id:"basic-example",level:2},{value:"Update the content",id:"update-the-content",level:2},{value:"Update the toast id",id:"update-the-toast-id",level:2},{value:"Apply a transition",id:"apply-a-transition",level:2},{value:"Reset option or inherit from ToastContainer",id:"reset-option-or-inherit-from-toastcontainer",level:2}];function l(t){const e={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.p,{children:"When you update a toast, the toast options and the content are inherited but don't worry you can update them as well."}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-images.githubusercontent.com/5574267/33761953-1ce2e0ea-dc0b-11e7-8967-a63c1185ce0e.gif",alt:"update-without-transition"})}),"\n",(0,o.jsx)(e.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"import { toast } from 'react-toastify';\n\nfunction Example() {\n  const toastId = React.useRef(null);\n\n  const notify = () => toastId.current = toast(\"Hello\", { autoClose: false });\n\n  const update = () => toast.update(toastId.current, { type: toast.TYPE.INFO, autoClose: 5000 });\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"update-the-content",children:"Update the content"}),"\n",(0,o.jsxs)(e.p,{children:["If you want to change the content it's straightforward as well. You can render any valid element including a react component. Pass your value to a ",(0,o.jsx)(e.code,{children:"render"})," option as follow:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:' // With a string\n toast.update(toastId, {\n    render: "New content",\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n  });\n\n// Or with a component\ntoast.update(toastId, {\n    render: MyComponent\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n});\n\ntoast.update(toastId, {\n    render: () => <div>New content</div>\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n});\n'})}),"\n",(0,o.jsx)(e.h2,{id:"update-the-toast-id",children:"Update the toast id"}),"\n",(0,o.jsxs)(e.p,{children:["If you want to update the ",(0,o.jsx)(e.code,{children:"toastId"})," it can be done. But don't forget to use the new id if you want to update your toast again \ud83d\ude05!"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:"const myNewToastId = 'loremIpsum';\n\ntoast.update(toastId, {\n  render: \"New content\",\n  type: toast.TYPE.INFO,\n  autoClose: 5000,\n  toastId: myNewToastId\n});\n\ntoast.update(myNewToastId, {\n  render: MyComponent\n  autoClose: 6000\n}); \n"})}),"\n",(0,o.jsx)(e.h2,{id:"apply-a-transition",children:"Apply a transition"}),"\n",(0,o.jsxs)(e.p,{children:["By default, when you update a toast, there is no transition applied. If you want to apply a transition, it can be done via the ",(0,o.jsx)(e.code,{children:"className"})," or the ",(0,o.jsx)(e.code,{children:"transition"})," option:"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.img,{src:"https://user-images.githubusercontent.com/5574267/33761952-1cc9d55a-dc0b-11e7-9a05-29186ea1c1f0.gif",alt:"update-with-transition"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:'// with css\ntoast.update(toastId, {\n  render: "New Content",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: \'rotateY animated\'\n})\n\n// with transition\ntoast.update(toastId, {\n  render: "New Content",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  transition: Rotate\n})\n'})}),"\n",(0,o.jsx)(e.h2,{id:"reset-option-or-inherit-from-toastcontainer",children:"Reset option or inherit from ToastContainer"}),"\n",(0,o.jsxs)(e.p,{children:["If you want to inherit props from the ",(0,o.jsx)(e.code,{children:"ToastContainer"}),", you can reset an option by passing null.\nIt's particularly useful when you remove the ",(0,o.jsx)(e.code,{children:"closeButton"})," from a toast and you want it back during the update."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-jsx",children:'function Example(){\n  const toastId = React.useRef(null);\n\n  const notify = () => {\n    toastId.current = toast("Hello", {\n      autoClose: false,\n      closeButton: false // Remove the closeButton\n    });\n  }\n\n  const update = () => {\n    toast.update(toastId.current, {\n      type: toast.TYPE.INFO,\n      autoClose: 5000,\n      closeButton: null // The closeButton defined on ToastContainer will be used\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h1,{id:"updating-a-toast-with-your-custom-options-example",children:"Updating a Toast with your custom options Example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-const",metastring:"failedOptions = {",children:'  position: "bottom-left",\n  autoClose: 5000,\n  closeButton: true,\n  hideProgressBar: false,\n  closeOnClick: false,\n  pauseOnHover: true,\n  draggable: false,\n  progress: undefined,\n  theme: "light",\n  toastId: \'ToastFailed\',\n  icon: <Icon\n    size="lg"\n    color=\'white\'\n    icon={<AlertIcon />}\n  />,\n  style: {\n    width: 500,\n    border: `2px solid ${COLORS.red}`\n  },\n}\n\nconst FailedMessage = () => (\n  <div>\n    your message and html here\n  </div>\n)\n    setTimeout(() => {\n      toast.update(toastId.current, {\n        render: FailedMessage,\n        ...failedOptions\n      })\n    }, 3000);\n'})})]})}function u(t={}){const{wrapper:e}={...(0,a.a)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(l,{...t})}):l(t)}},1151:(t,e,n)=>{n.d(e,{Z:()=>r,a:()=>i});var o=n(7294);const a={},s=o.createContext(a);function i(t){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),o.createElement(s.Provider,{value:e},t.children)}}}]);