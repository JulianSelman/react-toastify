"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[8376],{4917:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>j,frontMatter:()=>x,metadata:()=>o,toc:()=>y});const o=JSON.parse('{"id":"use-your-own-component","title":"Use your own component","description":"You can render any valid ReactNode: string, number, component... This let you customize the look and feel of the notifications quite easily.","source":"@site/docs/use-your-own-component.md","sourceDirName":".","slug":"/use-your-own-component","permalink":"/react-toastify/use-your-own-component","draft":false,"unlisted":false,"editUrl":"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/use-your-own-component.md","tags":[],"version":"current","frontMatter":{"id":"use-your-own-component","title":"Use your own component","sidebar_label":"Use Your Own Component"},"sidebar":"someSidebar","previous":{"title":"Guides","permalink":"/react-toastify/category/guides"},"next":{"title":"How to style \u2728","permalink":"/react-toastify/how-to-style"}}');var s=e(5105),a=e(9621),i=e(8101),r=e(4312),c=e(7486);const l=i.createContext(null);function u(){return i.useContext(l)}function d(n){const[t,e]=i.useState(0);return(0,s.jsx)(l.Provider,Object.assign({value:[t,e]},n))}function p(){const[n,t]=u();return(0,s.jsxs)(c.$,{onClick:()=>t((n=>n+1)),children:["Increment ",n]})}function m(){const[n]=u();return(0,s.jsxs)("div",{children:["The current counter count is ",n]})}const h=()=>(0,s.jsxs)(d,{children:[(0,s.jsxs)(c.m,{children:[(0,s.jsx)(p,{}),(0,s.jsx)(c.$,{lookAtMe:!0,onClick:()=>{(0,r.oR)((0,s.jsx)(m,{}))},children:"Display toast"})]}),(0,s.jsx)(r.N9,{autoClose:!1,draggable:!1})]}),x={id:"use-your-own-component",title:"Use your own component",sidebar_label:"Use Your Own Component"},f=void 0,g={},y=[{value:"Basic example",id:"basic-example",level:2},{value:"Passing data to your component",id:"passing-data-to-your-component",level:2},{value:"Using a hook inside your component",id:"using-a-hook-inside-your-component",level:2},{value:"Example with react-context",id:"example-with-react-context",level:2}];function C(n){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["You can render any valid ",(0,s.jsx)(t.code,{children:"ReactNode"}),": string, number, component... This let you customize the look and feel of the notifications quite easily."]}),"\n",(0,s.jsxs)(t.admonition,{title:"Important",type:"important",children:[(0,s.jsx)(t.p,{children:"When you provide a component, four props are injected into your component."}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"closeToast"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"data"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"isPaused"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"toastProps"})}),"\n"]})]}),"\n",(0,s.jsx)(t.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'import { ToastContainer, toast } from "react-toastify";\n\nconst Msg = ({ closeToast, toastProps }) => (\n  <div>\n    Lorem ipsum dolor {toastProps.position}\n    <button>Retry</button>\n    <button onClick={closeToast}>Close</button>\n  </div>\n);\n\nfunction App() {\n  const displayMsg = () => {\n    toast(Msg);\n    // toast(<Msg />) would also work\n  };\n\n  return (\n    <div>\n      <button onClick={displayMsg}>Click me</button>\n      <ToastContainer />\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:'You can also render a component using a function. More or less like a "render props":'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"toast(({ closeToast }) => <div>Hello \ud83d\udc4b</div>);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"passing-data-to-your-component",children:"Passing data to your component"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:'export const Msg = ({ data }) => {\n  return (\n    <div className="msg-container">\n      <p className="msg-title">{data.title}</p>\n      <p className="msg-description">{data.text}</p>\n    </div>\n  );\n};\n\n\n\ntoaster.success(Msg,\n  {\n    data : {\n      title: "You did it!",\n      text: "Good job!",\n    },\n  },\n);\n'})}),"\n",(0,s.jsx)(t.h2,{id:"using-a-hook-inside-your-component",children:"Using a hook inside your component"}),"\n",(0,s.jsxs)(t.admonition,{title:"Important",type:"important",children:[(0,s.jsx)(t.p,{children:"When you want to use a hook inside a toast you must pass a react element"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"toast(<YourComponent />)\n"})}),(0,s.jsx)(t.p,{children:"Passing a reference would not work because there is no way to know that this is a react element."}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"toast(YourComponent) // won't let you call hook inside YourComponent\n"})})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import { ToastContainer, ToastContentProps, toast } from 'react-toastify';\nimport { Button } from './Button';\nimport { useState } from 'react';\n\nexport default function App() {\n  const notify = () =>\n    toast(<Msg foo=\"bar\" />, {\n      autoClose: false,\n    });\n\n  return (\n    <div className=\"grid place-items-center h-dvh bg-zinc-900/15\">\n      <Button onClick={notify}>Notify !</Button>\n      <ToastContainer />\n    </div>\n  );\n}\n\n// We have to mark ToastContentProps as optional because those are injected when calling `toast`\ntype Props = Partial<ToastContentProps> & {\n  foo: string;\n};\n\nfunction Msg({ foo }: Props) {\n  const [counter, setCounter] = useState(0);\n\n  const inc = () => setCounter(counter + 1);\n\n  return (\n    <div>\n      <h3>Hello {foo}</h3>\n      <button className=\"border border-purple-400 p-2 rounded-md\" onClick={inc}>\n        Increment\n      </button>{' '}\n      {counter}\n    </div>\n  );\n}\n\n"})}),"\n",(0,s.jsx)(t.h2,{id:"example-with-react-context",children:"Example with react-context"}),"\n",(0,s.jsx)(t.p,{children:"In this example we will use react-context to share state across a component and a toast. Increment and display a toast at the same time to see how the state stay in sync !"}),"\n","\n",(0,s.jsx)(h,{}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'import React from "react";\nimport { ToastContainer, toast } from "react-toastify";\n\nconst CountContext = React.createContext(null);\n\nfunction useCount() {\n  const context = React.useContext(CountContext);\n  return context;\n}\n\nfunction CountProvider(props) {\n  const [count, setCount] = React.useState(0);\n\n  return <CountContext.Provider value={[count, setCount]} {...props} />;\n}\n\nfunction Counter() {\n  const [count, setCount] = useCount();\n  const increment = () => setCount((c) => c + 1);\n\n  return <Button onClick={increment}>Increment {count}</Button>;\n}\n\nfunction CountDisplay() {\n  const [count] = useCount();\n  return <div>The current counter count is {count}</div>;\n}\n\nexport const ContextExample = () => {\n  const displayToast = () => {\n    toast(<CountDisplay />);\n  };\n\n  return (\n    <CountProvider>\n      <Container>\n        <Counter />\n        <Button onClick={displayToast}>Display toast</Button>\n      </Container>\n      <ToastContainer autoClose={false} draggable={false} />\n    </CountProvider>\n  );\n};\n'})})]})}function j(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,s.jsx)(t,{...n,children:(0,s.jsx)(C,{...n})}):C(n)}},7486:(n,t,e)=>{e.d(t,{$:()=>l,m:()=>u});var o,s,a,i=e(4842),r=e(7349);const c=(0,r.i7)(o||(o=(0,i.A)(["\n    0% { background-position: 0 0; }\n    50% { background-position: 400% 0; }\n    100% { background-position: 0 0; }\n"]))),l=r.Ay.button(s||(s=(0,i.A)(['\n  cursor: pointer;\n  display: inline-block;\n  margin-bottom: 1rem;\n  font-size: 1.1rem;\n  height: 2.8rem;\n  letter-spacing: 0.1rem;\n  line-height: 2.8rem;\n  padding: 0 1.8rem;\n  text-align: center;\n  text-decoration: none;\n  white-space: nowrap;\n  position: relative;\n  z-index: 0;\n  color: #fff;\n  border-color: transparent;\n\n  &:before {\n    content: "";\n    background: linear-gradient(\n      45deg,\n      #ff0000,\n      #ff7300,\n      #fffb00,\n      #48ff00,\n      #00ffd5,\n      #002bff,\n      #7a00ff,\n      #ff00c8,\n      #ff0000\n    );\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    background-size: 400%;\n    z-index: -1;\n    filter: blur(5px);\n    width: calc(100% + 4px);\n    height: calc(100% + 4px);\n    animation: '," 20s linear infinite;\n    opacity: ",';\n    transition: opacity 0.3s ease-in-out;\n  }\n\n  &:active {\n    color: #000;\n  }\n\n  &:active:after {\n    background: transparent;\n  }\n\n  &:hover:before {\n    opacity: 1;\n  }\n\n  &:after {\n    z-index: -1;\n    content: "";\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: #111;\n    left: 0;\n    top: 0;\n  }\n'])),c,(n=>n.lookAtMe?1:0)),u=r.Ay.section(a||(a=(0,i.A)(["\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin: 1rem auto;\n"])))}}]);