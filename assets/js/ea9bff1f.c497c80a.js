"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[845],{9458:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"api/toast","title":"toast","description":"Props","source":"@site/docs/api/toast.md","sourceDirName":"api","slug":"/api/toast","permalink":"/react-toastify/api/toast","draft":false,"unlisted":false,"editUrl":"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/api/toast.md","tags":[],"version":"current","frontMatter":{"id":"toast","title":"toast","sidebar_label":"toast"},"sidebar":"someSidebar","previous":{"title":"ToastContainer","permalink":"/react-toastify/api/toast-container"},"next":{"title":"cssTransition","permalink":"/react-toastify/api/css-transition"}}');var o=s(5105),i=s(9621);const r={id:"toast",title:"toast",sidebar_label:"toast"},d=void 0,a={},l=[{value:"Props",id:"props",level:2},{value:"Usages",id:"usages",level:2}];function c(t){const e={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"props",children:"Props"}),"\n",(0,o.jsx)(e.admonition,{title:"Info",type:"info",children:(0,o.jsx)(e.p,{children:"When displaying a toast, the options are inherited from the container. Toast options supersede ToastContainer props"})}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"Options"}),(0,o.jsx)(e.th,{children:"Type"}),(0,o.jsx)(e.th,{children:"Description"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"toastId"}),(0,o.jsx)(e.td,{children:"string | number"}),(0,o.jsx)(e.td,{children:"Provide a custom id"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"type"}),(0,o.jsx)(e.td,{children:"string"}),(0,o.jsxs)(e.td,{children:["One of ",(0,o.jsx)(e.code,{children:"info"}),", ",(0,o.jsx)(e.code,{children:"success"}),", ",(0,o.jsx)(e.code,{children:"warning"}),", ",(0,o.jsx)(e.code,{children:"error"})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"position"}),(0,o.jsx)(e.td,{children:"string"}),(0,o.jsxs)(e.td,{children:["One of ",(0,o.jsx)(e.code,{children:"top-right"}),", ",(0,o.jsx)(e.code,{children:"top-center"}),", ",(0,o.jsx)(e.code,{children:"top-left"}),", ",(0,o.jsx)(e.code,{children:"bottom-right"}),", ",(0,o.jsx)(e.code,{children:"bottom-center"}),", ",(0,o.jsx)(e.code,{children:"bottom-left"})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"onOpen"}),(0,o.jsx)(e.td,{children:"function"}),(0,o.jsx)(e.td,{children:"Called when the notification appear"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"onClose"}),(0,o.jsx)(e.td,{children:"function"}),(0,o.jsx)(e.td,{children:"Called when the notification disappear"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"autoClose"}),(0,o.jsx)(e.td,{children:"bool | number"}),(0,o.jsx)(e.td,{children:"Delay in ms to close the toast. If set to false, the notification needs to be closed manually"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"closeButton"}),(0,o.jsx)(e.td,{children:"ReactNode | bool"}),(0,o.jsxs)(e.td,{children:["A React Component to replace the default close button or ",(0,o.jsx)(e.code,{children:"false"})," to hide the button"]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"transition"}),(0,o.jsx)(e.td,{children:"ReactNode"}),(0,o.jsx)(e.td,{children:"A reference to a valid react-transition-group/Transition component"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"hideProgressBar"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Display or not the progress bar below the toast(remaining time)"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"pauseOnHover"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Keep the timer running or not on hover"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"pauseOnFocusLoss"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Pause the timer when the window loses focus"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"closeOnClick"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Dismiss toast on click"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"className"}),(0,o.jsx)(e.td,{children:"string"}),(0,o.jsx)(e.td,{children:"Add optional classes to the container"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"style"}),(0,o.jsx)(e.td,{children:"object"}),(0,o.jsx)(e.td,{children:"Add optional inline style to the container"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"progressClassName"}),(0,o.jsx)(e.td,{children:"string"}),(0,o.jsx)(e.td,{children:"Add optional classes to the progress bar"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"draggable"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Allow toast to be draggable"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"draggablePercent"}),(0,o.jsx)(e.td,{children:"number"}),(0,o.jsx)(e.td,{children:"The percentage of the toast's width it takes for a drag to dismiss a toast(value between 0 and 100)"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"draggableDirection"}),(0,o.jsx)(e.td,{children:'"x" | "y"'}),(0,o.jsxs)(e.td,{children:["Specify the drag direction. Default is ",(0,o.jsx)(e.code,{children:"x"})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"containerId"}),(0,o.jsx)(e.td,{children:"string | number"}),(0,o.jsx)(e.td,{children:"Used to match a specific Toast container"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"role"}),(0,o.jsx)(e.td,{children:"string"}),(0,o.jsx)(e.td,{children:"Define the ARIA role for the toasts"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"delay"}),(0,o.jsx)(e.td,{children:"number"}),(0,o.jsx)(e.td,{children:"Let you delay the toast appearance. Pass a value in ms"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"onClick"}),(0,o.jsx)(e.td,{children:"function"}),(0,o.jsx)(e.td,{children:"Called when click inside Toast notification"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"render"}),(0,o.jsx)(e.td,{children:"ReactNode"}),(0,o.jsxs)(e.td,{children:["Only available when using ",(0,o.jsx)(e.code,{children:"toast.update"})]})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"isLoading"}),(0,o.jsx)(e.td,{children:"bool"}),(0,o.jsx)(e.td,{children:"Only available when using `toast.loading'"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"data"}),(0,o.jsx)(e.td,{children:"any"}),(0,o.jsxs)(e.td,{children:["any additional data you want to pass ",(0,o.jsx)(e.code,{children:'toast("hello", { data: {key: value} })'})]})]})]})]}),"\n",(0,o.jsx)(e.h2,{id:"usages",children:"Usages"}),"\n",(0,o.jsxs)(e.p,{children:["All the toast methods return a ",(0,o.jsx)(e.strong,{children:"toastId"})," except ",(0,o.jsx)(e.code,{children:"dismiss"})," and ",(0,o.jsx)(e.code,{children:"isActive"}),".\nThe ",(0,o.jsx)(e.strong,{children:"toastId"})," can be used to remove a toast programmatically or to check if the toast is displayed."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:'const options = {\n    onOpen: () => console.log("open"),\n    onClose: (reason?: boolean | string) => console.log("closed", reason),\n    autoClose: 6000,\n    closeButton: FontAwesomeCloseButton,\n    type: "info",\n    hideProgressBar: false,\n    position: "top-left",\n    pauseOnHover: true,\n    transition: MyCustomTransition,\n    progress: 0.2\n    // and so on ...\n};\n\n// display toasts\nconst toastId = toast("Hello", options);\ntoast(MyComponent, options); \ntoast(<MyComponent foo={bar}/>, options); \ntoast(({ closeToast }) => <div>Render props like</div>, options);\n\n//shortcut to different types\ntoast.success("Hello", options); \ntoast.info("World", options); \ntoast.warn(MyComponent, options); \ntoast.error("Error", options);\n\n// Remove all toasts !\ntoast.dismiss();\n\n// Remove given toast\ntoast.dismiss(toastId); \n\n// Remove toast that has a given id for a specific container\ntoast.dismiss({ id: "123", containerId: "12" })\n\n//Check if a toast is displayed or not\ntoast.isActive(toastId); \n\n// update a toast\ntoast.update(toastId, {\n  type: toast.TYPE.INFO,\n  render: <Img foo={bar}/>\n});\n\n// Clear waiting queue when working with limit\ntoast.clearWaitingQueue();\n\n// Clear waiting queue for a specific container when working with multiple container\ntoast.clearWaitingQueue({ containerId: "anId" });\n\n\n// completes the controlled progress bar\ntoast.done(toastId);\n\n// play/pause the timer programmatically\ntoast.play({ id: "123" });\ntoast.pause({ id: "123" });\n'})})]})}function h(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},9621:(t,e,s)=>{s.d(e,{R:()=>r,x:()=>d});var n=s(8101);const o={},i=n.createContext(o);function r(t){const e=n.useContext(i);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function d(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),n.createElement(i.Provider,{value:e},t.children)}}}]);