"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[1385],{7594:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"listen-for-changes","title":"Listen for changes","description":"If you want to know when a toast is added, updated or removed, toast expose a onChange method. When called a function to unsubscribe is returned. The callback will receive a ToastItem. The item provides a bunch of useful properties status, content, id, data, etc...","source":"@site/docs/listen-for-changes.md","sourceDirName":".","slug":"/listen-for-changes","permalink":"/react-toastify/listen-for-changes","draft":false,"unlisted":false,"editUrl":"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/listen-for-changes.md","tags":[],"version":"current","frontMatter":{"id":"listen-for-changes","title":"Listen for changes","sidebar_label":"Listen for changes"},"sidebar":"someSidebar","previous":{"title":"Update a toast","permalink":"/react-toastify/update-toast"},"next":{"title":"Use a custom close button or remove it","permalink":"/react-toastify/use-a-custom-close-button-or-remove-it"}}');var o=n(5105),s=n(9621);const r={id:"listen-for-changes",title:"Listen for changes",sidebar_label:"Listen for changes"},c=void 0,d={},i=[];function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["If you want to know when a toast is added, updated or removed, ",(0,o.jsx)(t.code,{children:"toast"})," expose a ",(0,o.jsx)(t.code,{children:"onChange"})," method. When called a function to unsubscribe is returned. The callback will receive a ",(0,o.jsx)(t.code,{children:"ToastItem"}),". The item provides a bunch of useful properties ",(0,o.jsx)(t.code,{children:"status"}),", ",(0,o.jsx)(t.code,{children:"content"}),", ",(0,o.jsx)(t.code,{children:"id"}),", ",(0,o.jsx)(t.code,{children:"data"}),", etc..."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import type { ToastItem } from "react-toastify";\n\ninterface ToastItem<Data = {}> {\n    id: Id;\n    content: React.ReactNode;\n    theme?: Theme;\n    type?: TypeOptions;\n    isLoading?: boolean;\n    containerId?: Id;\n    data: Data;\n    icon?: React.ReactNode | false;\n    status: "added" | "removed" | "updated" \n}\n\nconst unsubscribe = toast.onChange((payload: ToastItem) => {\n  switch (payload.status) {\n    case "added":\n      // new toast added\n      break;\n    case "updated":\n      // toast updated\n      break;\n    case "removed":\n      // toast has been removed\n      break;\n  }\n});\nunsubscribe();\n'})}),"\n",(0,o.jsx)(t.p,{children:"For example, if I want to log something everytime there is a new error notification, with the new API it's trivial"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'toast.onChange(payload => {\n  if(payload.status === "added" && payload.type === "error") {\n    logger.error({\n      createdAt: Date.now(),\n      content: payload.content,\n      data: payload.data\n    })\n  }\n})\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},9621:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var a=n(8101);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);