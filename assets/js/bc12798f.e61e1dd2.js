"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[2789],{132:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"accessibility","title":"Accessibility","description":"By default, all toasts are displayed with the ARIA role alert. This can be changed globally or per toast.","source":"@site/docs/accessibility.md","sourceDirName":".","slug":"/accessibility","permalink":"/react-toastify/accessibility","draft":false,"unlisted":false,"editUrl":"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/accessibility.md","tags":[],"version":"current","frontMatter":{"id":"accessibility","title":"Accessibility","sidebar_label":"Accessibility \u2728"},"sidebar":"someSidebar","previous":{"title":"Use a custom id","permalink":"/react-toastify/use-a-custom-id"},"next":{"title":"Pause toast timer when the window loses focus","permalink":"/react-toastify/pause-on-focus-loss"}}');var n=s(5105),a=s(9621);const c={id:"accessibility",title:"Accessibility",sidebar_label:"Accessibility \u2728"},o=void 0,l={},r=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["By default, all toasts are displayed with the ARIA role ",(0,n.jsx)(t.code,{children:"alert"}),". This can be changed globally or per toast."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Globally"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:'<ToastContainer role="alert" />\n'})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Per toast"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:'toast("hello", {\n  role: "alert"\n})\n'})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"ToastContainer"})," and ",(0,n.jsx)(t.code,{children:"toast"})," accept an ",(0,n.jsx)(t.code,{children:"ariaLabel"})," prop as well. This is quite helpful for screen readers and also for testing.\nFor example, in cypress you could do ",(0,n.jsx)(t.code,{children:'cy.findByRole("alert", {name: "the aria label you specified"})'}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:'toast("hello", {\n  ariaLabel: "something"\n})\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If a notification is visible and the user presses ",(0,n.jsx)(t.code,{children:"alt+t"})," it will focus on the first notification allowing the user to use ",(0,n.jsx)(t.code,{children:"Tab"})," to navigate through the different elements within the notification."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"hotKeys"})," can be changed of course."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"// focus when user presses \u2318 + F\nconst matchShortcut = (e: KeyboardEvent) => e.metaKey && e.key === 'f'\n\n<ToastContainer hotKeys={matchShortcut} ariaLabel=\"Notifications \u2318 + F\" />\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},9621:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>o});var i=s(8101);const n={},a=i.createContext(n);function c(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);