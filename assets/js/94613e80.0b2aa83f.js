"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[1516],{5901:(s,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=e(5893),n=e(1151);const a={id:"how-to-style",title:"How to style",sidebar_label:"How to style"},i=void 0,r={id:"how-to-style",title:"How to style",description:"Override css variables",source:"@site/docs/how-to-style.md",sourceDirName:".",slug:"/how-to-style",permalink:"/react-toastify/how-to-style",draft:!1,unlisted:!1,editUrl:"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/how-to-style.md",tags:[],version:"current",frontMatter:{id:"how-to-style",title:"How to style",sidebar_label:"How to style"},sidebar:"someSidebar",previous:{title:"Multi containers",permalink:"/react-toastify/multi-containers"},next:{title:"Dispatch toast outside of react component",permalink:"/react-toastify/dispatch-toast-outside-of-react-component"}},l={},c=[{value:"Override css variables",id:"override-css-variables",level:2},{value:"Override existing css classes",id:"override-existing-css-classes",level:2},{value:"Build your own style using the scss files",id:"build-your-own-style-using-the-scss-files",level:2},{value:"Passing css classes to component",id:"passing-css-classes-to-component",level:2},{value:"Css classes as function",id:"css-classes-as-function",level:2},{value:"How to style with styled-components",id:"how-to-style-with-styled-components",level:2},{value:"Extend existing css classes",id:"extend-existing-css-classes",level:3},{value:"Pass css classes to props",id:"pass-css-classes-to-props",level:3},{value:"Styling from scratch",id:"styling-from-scratch",level:2},{value:"Individually stying toasts by ID",id:"individually-stying-toasts-by-id",level:2},{value:"Inject style on demand",id:"inject-style-on-demand",level:2},{value:"Mobile",id:"mobile",level:2}];function d(s){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...s.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"override-css-variables",children:"Override css variables"}),"\n",(0,o.jsx)(t.p,{children:"Below the list of the css variables that are exposed by the library. You can accomplish a lot by overriding some of them."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:':root {\n  --toastify-color-light: #fff;\n  --toastify-color-dark: #121212;\n  --toastify-color-info: #3498db;\n  --toastify-color-success: #07bc0c;\n  --toastify-color-warning: #f1c40f;\n  --toastify-color-error: #e74c3c;\n  --toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n  --toastify-icon-color-info: var(--toastify-color-info);\n  --toastify-icon-color-success: var(--toastify-color-success);\n  --toastify-icon-color-warning: var(--toastify-color-warning);\n  --toastify-icon-color-error: var(--toastify-color-error);\n\n  --toastify-toast-width: 320px;\n  --toastify-toast-background: #fff;\n  --toastify-toast-min-height: 64px;\n  --toastify-toast-max-height: 800px;\n  --toastify-font-family: sans-serif;\n  --toastify-z-index: 9999;\n\n  --toastify-text-color-light: #757575;\n  --toastify-text-color-dark: #fff;\n\n  //Used only for colored theme\n  --toastify-text-color-info: #fff;\n  --toastify-text-color-success: #fff;\n  --toastify-text-color-warning: #fff;\n  --toastify-text-color-error: #fff;\n\n  --toastify-spinner-color: #616161;\n  --toastify-spinner-color-empty-area: #e0e0e0;\n\n  // Used when no type is provided\n  // toast("**hello**")\n  --toastify-color-progress-light: linear-gradient(\n    to right,\n    #4cd964,\n    #5ac8fa,\n    #007aff,\n    #34aadc,\n    #5856d6,\n    #ff2d55\n  );\n  // Used when no type is provided\n  --toastify-color-progress-dark: #bb86fc;\n  --toastify-color-progress-info: var(--toastify-color-info);\n  --toastify-color-progress-success: var(--toastify-color-success);\n  --toastify-color-progress-warning: var(--toastify-color-warning);\n  --toastify-color-progress-error: var(--toastify-color-error);\n\n  // used to control the opacity of the progress trail\n  --toastify-color-progress-bgo: .2;\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"override-existing-css-classes",children:"Override existing css classes"}),"\n",(0,o.jsx)(t.p,{children:"If overriding the css variables is not enough for you, you can override the existing CSS classes. Below, a list of the CSS classes used(classes used for animation and media query are omitted)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"/** Used to define container behavior: width, position: fixed etc... **/\n.Toastify__toast-container {\n}\n\n/** Used to define the position of the ToastContainer **/\n.Toastify__toast-container--top-left {\n}\n.Toastify__toast-container--top-center {\n}\n.Toastify__toast-container--top-right {\n}\n.Toastify__toast-container--bottom-left {\n}\n.Toastify__toast-container--bottom-center {\n}\n.Toastify__toast-container--bottom-right {\n}\n\n/** Classes for the displayed toast **/\n.Toastify__toast {\n}\n.Toastify__toast--rtl {\n}\n.Toastify__toast-body {\n}\n\n/** Used to position the icon **/\n.Toastify__toast-icon {\n}\n\n/** handle the notification color and the text color based on the theme **/\n.Toastify__toast-theme--dark {\n}\n.Toastify__toast-theme--light {\n}\n.Toastify__toast-theme--colored.Toastify__toast--default {\n}\n.Toastify__toast-theme--colored.Toastify__toast--info {\n}\n.Toastify__toast-theme--colored.Toastify__toast--success {\n}\n.Toastify__toast-theme--colored.Toastify__toast--warning {\n}\n.Toastify__toast-theme--colored.Toastify__toast--error {\n}\n\n.Toastify__progress-bar {\n}\n.Toastify__progress-bar--rtl {\n}\n.Toastify__progress-bar-theme--light {\n}\n.Toastify__progress-bar-theme--dark {\n}\n.Toastify__progress-bar--info {\n}\n.Toastify__progress-bar--success {\n}\n.Toastify__progress-bar--warning {\n}\n.Toastify__progress-bar--error {\n}\n/** colored notifications share the same progress bar color **/\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--info,\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--success,\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--warning,\n.Toastify__progress-bar-theme--colored.Toastify__progress-bar--error {\n}\n\n/** Classes for the close button. Better use your own closeButton **/\n.Toastify__close-button {\n}\n.Toastify__close-button--default {\n}\n.Toastify__close-button > svg {\n}\n.Toastify__close-button:hover,\n.Toastify__close-button:focus {\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"build-your-own-style-using-the-scss-files",children:"Build your own style using the scss files"}),"\n",(0,o.jsxs)(t.p,{children:["Grab the ",(0,o.jsx)(t.a,{href:"https://github.com/fkhadra/react-toastify/tree/master/scss",children:"scss directory"})," of the repository and build your own stylesheet. If you just want to change some colors, most of them are defined inside the ",(0,o.jsx)(t.code,{children:"_variables.scss"})," file."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"scss\n\u251c\u2500\u2500 _closeButton.scss\n\u251c\u2500\u2500 _progressBar.scss\n\u251c\u2500\u2500 _toast.scss\n\u251c\u2500\u2500 _toastContainer.scss\n\u251c\u2500\u2500 _variables.scss\n\u251c\u2500\u2500 \ud83d\udcc1 animations\n\u2502  \u251c\u2500\u2500 _bounce.scss\n\u2502  \u251c\u2500\u2500 _flip.scss\n\u2502  \u251c\u2500\u2500 _slide.scss\n\u2502  \u2514\u2500\u2500 _zoom.scss\n\u251c\u2500\u2500 main.scss\n\u2514\u2500\u2500 minimal.scss\n"})}),"\n",(0,o.jsx)(t.admonition,{title:"Info",type:"info",children:(0,o.jsx)(t.p,{children:"You built an amazing theme and you want to share it with the community, please let me know. Contributions are welcome!"})}),"\n",(0,o.jsx)(t.h2,{id:"passing-css-classes-to-component",children:"Passing css classes to component"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ToastContainer"})," accept the following props for styling:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"className: applied to the container"}),"\n",(0,o.jsx)(t.li,{children:"toastClassName: applied on the toast wrapper"}),"\n",(0,o.jsx)(t.li,{children:"bodyClassName: applied on the toast body"}),"\n",(0,o.jsx)(t.li,{children:"progressClassName: applied on the progress bar"}),"\n",(0,o.jsx)(t.li,{children:"style: inline style applied to the container"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'<ToastContainer className="foo" style={{ width: "2000px" }} />\n'})}),"\n",(0,o.jsx)(t.p,{children:"When displaying a notification you can also set some css classes:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["className: applied on the toast wrapper (this override ",(0,o.jsx)(t.code,{children:"toastClassName"})," is set by the container )"]}),"\n",(0,o.jsxs)(t.li,{children:["bodyClassName: applied on the toast body (this override ",(0,o.jsx)(t.code,{children:"bodyClassName"})," is set by the container )"]}),"\n",(0,o.jsxs)(t.li,{children:["progressClassName: applied on the progress bar (this override ",(0,o.jsx)(t.code,{children:"progressClassName"})," is set by the container )"]}),"\n",(0,o.jsx)(t.li,{children:"style: inline style applied to the toast"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'toast("Custom style", {\n  className: "black-background",\n  bodyClassName: "grow-font-size",\n  progressClassName: "fancy-progress-bar",\n});\n'})}),"\n",(0,o.jsx)(t.h2,{id:"css-classes-as-function",children:"Css classes as function"}),"\n",(0,o.jsx)(t.p,{children:"You can also provide a function. This is what it looks like with tailwind css"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'const contextClass = {\n  success: "bg-blue-600",\n  error: "bg-red-600",\n  info: "bg-gray-600",\n  warning: "bg-orange-400",\n  default: "bg-indigo-600",\n  dark: "bg-white-600 font-gray-300",\n};\n\nconst App = () => {\n  return (\n    <>\n      <Main />\n      <ToastContainer\n        toastClassName={(context) =>\n          contextClass[context?.type || "default"] +\n          " relative flex p-1 min-h-10 rounded-md justify-between overflow-hidden cursor-pointer"\n        }\n        bodyClassName={() => "text-sm font-white font-med block p-3"}\n        position="bottom-left"\n        autoClose={3000}\n      />\n    </>\n  );\n};\n'})}),"\n",(0,o.jsx)(t.h2,{id:"how-to-style-with-styled-components",children:"How to style with styled-components"}),"\n",(0,o.jsx)(t.h3,{id:"extend-existing-css-classes",children:"Extend existing css classes"}),"\n",(0,o.jsxs)(t.p,{children:["You can override the css classes with ",(0,o.jsx)(t.code,{children:"styled-components"}),". You can find the list of the css classes used ",(0,o.jsx)(t.a,{href:"/react-toastify/how-to-style#override-existing-css-classes",children:"here"}),". This is where you will also define the style for your notification."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import React from "react";\nimport styled from "styled-components";\nimport { ToastContainer } from "react-toastify";\n\nconst StyledContainer = styled(ToastContainer)`\n  // https://styled-components.com/docs/faqs#how-can-i-override-styles-with-higher-specificity\n  &&&.Toastify__toast-container {\n  }\n  .Toastify__toast {\n  }\n  .Toastify__toast-body {\n  }\n  .Toastify__progress-bar {\n  }\n`;\n'})}),"\n",(0,o.jsx)(t.h3,{id:"pass-css-classes-to-props",children:"Pass css classes to props"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'const StyledToastContainer = styled(ToastContainer).attrs({\n  className: "toast-container",\n  toastClassName: "toast",\n  bodyClassName: "body",\n  progressClassName: "progress",\n})`\n  /* .toast-container */\n  width: 100%;\n\n  /* .toast is passed to toastClassName */\n  .toast {\n    background-color: var(--color-black);\n  }\n\n  button[aria-label="close"] {\n    display: none;\n  }\n\n  /* .body is passed to bodyClassName */\n  .body {\n  }\n\n  /* .progress is passed to progressClassName */\n  .progress {\n  }\n`;\n'})}),"\n",(0,o.jsx)(t.h2,{id:"styling-from-scratch",children:"Styling from scratch"}),"\n",(0,o.jsx)(t.p,{children:"If you want to style from scratch simply include the bare minimum style and you are good to go."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import "react-toastify/dist/ReactToastify.minimal.css";\n'})}),"\n",(0,o.jsx)(t.h2,{id:"individually-stying-toasts-by-id",children:"Individually stying toasts by ID"}),"\n",(0,o.jsx)(t.p,{children:"If you don't want a global style with ToastContainer you can try the following.\nIn your custom toast make sure to provide a ToastId"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"export const MyCustomToast = () => {\nreturn toast(MyCustomContentDiv, {\n// your custom options\ntoastId: MyCustomToastId\n}\n}\n\n// sample that will change the styling just for this toast id in the icon area. This css class is imported in the file where the custom toast is used.\ndiv#MyCustomToastId .Toastify__toast-icon {\n    width: 60px;\n    background: #00BF91;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"inject-style-on-demand",children:"Inject style on demand"}),"\n",(0,o.jsx)(t.p,{children:"If you don't have a css loader or you want to inject the style on demand(convenient with css module), the library provide a helper for that"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'import { injectStyle } from "react-toastify/dist/inject-style";\n\n// CALL IT ONCE IN YOUR APP\ninjectStyle();\n'})}),"\n",(0,o.jsx)("iframe",{src:"https://codesandbox.io/embed/react-toastify-inject-style-qfg0l?fontsize=14&hidenavigation=1&theme=dark&view=preview",style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},title:"react-toastify-inject-style",allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}),"\n",(0,o.jsx)(t.h2,{id:"mobile",children:"Mobile"}),"\n",(0,o.jsx)(t.p,{children:"On mobile, the toast will take all the available width."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://user-images.githubusercontent.com/5574267/28754040-ae7195ea-753d-11e7-86e1-f23c5e6bc531.gif",alt:"react toastiy mobile"})})]})}function h(s={}){const{wrapper:t}={...(0,n.a)(),...s.components};return t?(0,o.jsx)(t,{...s,children:(0,o.jsx)(d,{...s})}):d(s)}},1151:(s,t,e)=>{e.d(t,{Z:()=>r,a:()=>i});var o=e(7294);const n={},a=o.createContext(n);function i(s){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof s?s(t):{...t,...s}}),[t,s])}function r(s){let t;return t=s.disableParentContext?"function"==typeof s.components?s.components(n):s.components||n:i(s.components),o.createElement(a.Provider,{value:t},s.children)}}}]);