"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[7921],{505:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"update-toast","title":"Update a toast","description":"When you update a toast, the toast options and the content are inherited but don\'t worry you can update them as well.","source":"@site/docs/update-toast.md","sourceDirName":".","slug":"/update-toast","permalink":"/react-toastify/update-toast","draft":false,"unlisted":false,"editUrl":"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/update-toast.md","tags":[],"version":"current","frontMatter":{"id":"update-toast","title":"Update a toast","sidebar_label":"Update a toast"},"sidebar":"someSidebar","previous":{"title":"Use a controlled progress bar","permalink":"/react-toastify/use-a-controlled-progress-bar"},"next":{"title":"Listen for changes","permalink":"/react-toastify/listen-for-changes"}}');var a=n(5105),s=n(9621);const i={id:"update-toast",title:"Update a toast",sidebar_label:"Update a toast"},r=void 0,d={},c=[{value:"Basic example",id:"basic-example",level:2},{value:"Update the content",id:"update-the-content",level:2},{value:"Update the toast id",id:"update-the-toast-id",level:2},{value:"Apply a transition",id:"apply-a-transition",level:2},{value:"Reset option or inherit from ToastContainer",id:"reset-option-or-inherit-from-toastcontainer",level:2}];function l(t){const e={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"When you update a toast, the toast options and the content are inherited but don't worry you can update them as well."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-images.githubusercontent.com/5574267/33761953-1ce2e0ea-dc0b-11e7-8967-a63c1185ce0e.gif",alt:"update-without-transition"})}),"\n",(0,a.jsx)(e.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'import { toast } from \'react-toastify\';\n\nfunction Example() {\n  const toastId = React.useRef(null);\n\n  const notify = () => toastId.current = toast("Hello", { autoClose: false });\n\n  const update = () => toast.update(toastId.current, { type: "info", autoClose: 5000 });\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"update-the-content",children:"Update the content"}),"\n",(0,a.jsxs)(e.p,{children:["If you want to change the content it's straightforward as well. You can render any valid element including a react component. Pass your value to a ",(0,a.jsx)(e.code,{children:"render"})," option as follow:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:' // With a string\n toast.update(toastId, {\n    render: "New content",\n    type: "info",\n    autoClose: 5000\n  });\n\n// Or with a component\ntoast.update(toastId, {\n    render: MyComponent,\n    type: "info",\n    autoClose: 5000\n});\n\ntoast.update(toastId, {\n    render: () => <div>New content</div>,\n    type: "info",\n    autoClose: 5000\n});\n'})}),"\n",(0,a.jsx)(e.h2,{id:"update-the-toast-id",children:"Update the toast id"}),"\n",(0,a.jsxs)(e.p,{children:["If you want to update the ",(0,a.jsx)(e.code,{children:"toastId"})," it can be done. But don't forget to use the new id if you want to update your notification again \ud83d\ude05!"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'const myNewToastId = \'loremIpsum\';\n\ntoast.update(toastId, {\n  render: "New content",\n  type: "info",\n  autoClose: 5000,\n  toastId: myNewToastId\n});\n\ntoast.update(myNewToastId, {\n  render: MyComponent,\n  autoClose: 6000\n}); \n'})}),"\n",(0,a.jsx)(e.h2,{id:"apply-a-transition",children:"Apply a transition"}),"\n",(0,a.jsxs)(e.p,{children:["By default, when you update a toast, there is no transition applied. If you want to apply a transition, it can be done via the ",(0,a.jsx)(e.code,{children:"className"})," or the ",(0,a.jsx)(e.code,{children:"transition"})," option:"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://user-images.githubusercontent.com/5574267/33761952-1cc9d55a-dc0b-11e7-9a05-29186ea1c1f0.gif",alt:"update-with-transition"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'// with css\ntoast.update(toastId, {\n  render: "New Content",\n  type: "info",\n  //Here the magic\n  className: \'rotateY animated\'\n})\n\n// with transition\ntoast.update(toastId, {\n  render: "New Content",\n  type: "info",\n  //Here the magic\n  transition: Rotate\n})\n'})}),"\n",(0,a.jsx)(e.h2,{id:"reset-option-or-inherit-from-toastcontainer",children:"Reset option or inherit from ToastContainer"}),"\n",(0,a.jsxs)(e.p,{children:["If you want to inherit props from the ",(0,a.jsx)(e.code,{children:"ToastContainer"}),", you can reset an option by passing null.\nIt's particularly useful when you remove the ",(0,a.jsx)(e.code,{children:"closeButton"})," from a toast, and you want it back during the update."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'function Example(){\n  const toastId = React.useRef(null);\n\n  const notify = () => {\n    toastId.current = toast("Hello", {\n      autoClose: false,\n      closeButton: false // Remove the closeButton\n    });\n  }\n\n  const update = () => {\n    toast.update(toastId.current, {\n      type: "info",\n      autoClose: 5000,\n      closeButton: null // The closeButton defined on ToastContainer will be used\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  );\n}\n'})})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(l,{...t})}):l(t)}},9621:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>r});var o=n(8101);const a={},s=o.createContext(a);function i(t){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),o.createElement(s.Provider,{value:e},t.children)}}}]);