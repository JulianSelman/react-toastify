"use strict";(self.webpackChunkreact_toastify_doc=self.webpackChunkreact_toastify_doc||[]).push([[3456],{1877:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>g,contentTitle:()=>x,default:()=>j,frontMatter:()=>h,metadata:()=>f,toc:()=>y});var o=e(5893),a=e(1151),s=e(7294),r=e(148),i=e(6434);const c=s.createContext(null);function l(){return s.useContext(c)}function d(n){const[t,e]=s.useState(0);return(0,o.jsx)(c.Provider,{value:[t,e],...n})}function u(){const[n,t]=l();return(0,o.jsxs)(i.z,{onClick:()=>t((n=>n+1)),children:["Increment ",n]})}function p(){const[n]=l();return(0,o.jsxs)("div",{children:["The current counter count is ",n]})}const m=()=>(0,o.jsxs)(d,{children:[(0,o.jsxs)(i.W,{children:[(0,o.jsx)(u,{}),(0,o.jsx)(i.z,{lookAtMe:!0,onClick:()=>{(0,r.Am)((0,o.jsx)(p,{}))},children:"Display toast"})]}),(0,o.jsx)(r.Ix,{autoClose:!1,draggable:!1})]}),h={id:"render-what-you-want",title:"Render anything",sidebar_label:"Render Anything"},x=void 0,f={id:"render-what-you-want",title:"Render anything",description:"You can render any valid ReactNode: string, number, component... This is really straightforward.",source:"@site/docs/render-what-you-want.md",sourceDirName:".",slug:"/render-what-you-want",permalink:"/react-toastify/render-what-you-want",draft:!1,unlisted:!1,editUrl:"https://github.com/fkhadra/react-toastify-doc/edit/master/docs/render-what-you-want.md",tags:[],version:"current",frontMatter:{id:"render-what-you-want",title:"Render anything",sidebar_label:"Render Anything"},sidebar:"someSidebar",previous:{title:"Handling autoClose",permalink:"/react-toastify/autoClose"},next:{title:"Remove toast programmatically",permalink:"/react-toastify/remove-toast"}},g={},y=[{value:"Basic example",id:"basic-example",level:2},{value:"Custom implementation example (TS)",id:"custom-implementation-example-ts",level:2},{value:"Example with react context \ud83d\ude80",id:"example-with-react-context-",level:2}];function C(n){const t={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["You can render any valid ",(0,o.jsx)(t.code,{children:"ReactNode"}),": string, number, component... This is really straightforward."]}),"\n",(0,o.jsx)(t.h2,{id:"basic-example",children:"Basic example"}),"\n",(0,o.jsx)(t.admonition,{title:"Important",type:"important",children:(0,o.jsxs)(t.p,{children:["When you render a component, a ",(0,o.jsx)(t.code,{children:"closeToast"})," prop and the ",(0,o.jsx)(t.code,{children:"toastProps"})," are injected into your component."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import React from "react";\nimport { ToastContainer, toast } from "react-toastify";\n\nconst Msg = ({ closeToast, toastProps }) => (\n  <div>\n    Lorem ipsum dolor {toastProps.position}\n    <button>Retry</button>\n    <button onClick={closeToast}>Close</button>\n  </div>\n);\n\nfunction App() {\n  const displayMsg = () => {\n    toast(<Msg />);\n    // toast(Msg) would also work\n  };\n\n  return (\n    <div>\n      <button onClick={displayMsg}>Click me</button>\n      <ToastContainer />\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:'You can also render a component using a function. More or less like a "render props":'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"toast(({ closeToast }) => <div>Functional swag \ud83d\ude0e</div>);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"custom-implementation-example-ts",children:"Custom implementation example (TS)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'export const Msg = ({ title, text }) => {\n  return (\n    <div className="msg-container">\n      <p className="msg-title">{title}</p>\n      <p className="msg-description">{text}</p>\n    </div>\n  );\n};\n\nconst toaster = (myProps, toastProps): Id =>\n  toast(<Msg {...myProps} />, { ...toastProps });\n\ntoaster.success = (myProps, toastProps): Id =>\n  toast.success(<Msg {...myProps} />, { ...toastProps });\n\n// ...the other notification types\n\n// use it\ntoaster.success(\n  {\n    title: "You did it!",\n    text: "Good job!",\n  },\n  { autoClose: false }\n);\n'})}),"\n",(0,o.jsx)(t.h2,{id:"example-with-react-context-",children:"Example with react context \ud83d\ude80"}),"\n",(0,o.jsx)(t.p,{children:"In this example we will use react context to share state accross a component and a toast. Increment and display a toast at the same time to see how the state stay in sync !"}),"\n","\n","\n",(0,o.jsx)(m,{}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import React from "react";\nimport { ToastContainer, toast } from "react-toastify";\n\nconst CountContext = React.createContext(null);\n\nfunction useCount() {\n  const context = React.useContext(CountContext);\n  return context;\n}\n\nfunction CountProvider(props) {\n  const [count, setCount] = React.useState(0);\n\n  return <CountContext.Provider value={[count, setCount]} {...props} />;\n}\n\nfunction Counter() {\n  const [count, setCount] = useCount();\n  const increment = () => setCount((c) => c + 1);\n\n  return <Button onClick={increment}>Increment {count}</Button>;\n}\n\nfunction CountDisplay() {\n  const [count] = useCount();\n  return <div>The current counter count is {count}</div>;\n}\n\nexport const ContextExample = () => {\n  const displayToast = () => {\n    toast(<CountDisplay />);\n  };\n\n  return (\n    <CountProvider>\n      <Container>\n        <Counter />\n        <Button onClick={displayToast}>Display toast</Button>\n      </Container>\n      <ToastContainer autoClose={false} draggable={false} />\n    </CountProvider>\n  );\n};\n'})}),"\n",(0,o.jsxs)(t.admonition,{title:"Important",type:"important",children:[(0,o.jsxs)(t.p,{children:["When you want to use a hook inside a toast you must do ",(0,o.jsx)(t.code,{children:"toast(<YourComponent />)"}),"."]}),(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"toast(YourComponent)"})," would not work because there is no way to know that this is a react element"]})]})]})}function j(n={}){const{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(C,{...n})}):C(n)}},6434:(n,t,e)=>{e.d(t,{W:()=>d,z:()=>l});var o,a,s,r=e(1880),i=e(9521);const c=(0,i.F4)(o||(o=(0,r.Z)(["\n    0% { background-position: 0 0; }\n    50% { background-position: 400% 0; }\n    100% { background-position: 0 0; }\n"]))),l=i.ZP.button(a||(a=(0,r.Z)(['\n  cursor: pointer;\n  display: inline-block;\n  margin-bottom: 1rem;\n  font-size: 1.1rem;\n  height: 2.8rem;\n  letter-spacing: 0.1rem;\n  line-height: 2.8rem;\n  padding: 0 1.8rem;\n  text-align: center;\n  text-decoration: none;\n  white-space: nowrap;\n  position: relative;\n  z-index: 0;\n  color: #fff;\n  border-color: transparent;\n\n  &:before {\n    content: "";\n    background: linear-gradient(\n      45deg,\n      #ff0000,\n      #ff7300,\n      #fffb00,\n      #48ff00,\n      #00ffd5,\n      #002bff,\n      #7a00ff,\n      #ff00c8,\n      #ff0000\n    );\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    background-size: 400%;\n    z-index: -1;\n    filter: blur(5px);\n    width: calc(100% + 4px);\n    height: calc(100% + 4px);\n    animation: '," 20s linear infinite;\n    opacity: ",';\n    transition: opacity 0.3s ease-in-out;\n  }\n\n  &:active {\n    color: #000;\n  }\n\n  &:active:after {\n    background: transparent;\n  }\n\n  &:hover:before {\n    opacity: 1;\n  }\n\n  &:after {\n    z-index: -1;\n    content: "";\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: #111;\n    left: 0;\n    top: 0;\n  }\n'])),c,(n=>n.lookAtMe?1:0)),d=i.ZP.section(s||(s=(0,r.Z)(["\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin: 1rem auto;\n"])))}}]);